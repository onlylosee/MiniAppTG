import asyncio
import logging
import json
import re
import os
import sqlite3
import shutil
import pytz
from typing import Union
from telegram import CallbackQuery
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters
)
from datetime import datetime, timedelta
from telegram import (
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
REFERRAL_DEBUG = True  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ False –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
WAIT_INVEST_AMOUNT = 10
WAIT_CALC_AMOUNT = 1
MIN_INVEST_AMOUNT = 10  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAIT_TOPUP_AMOUNT, WAIT_WITHDRAW_AMOUNT, WAIT_REQUISITES, WAIT_PAYMENT_METHOD, WAIT_INVEST_AMOUNT, WAIT_WITHDRAW_METHOD, WAIT_CRYPTO_AMOUNT = range(
    7)
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ADMINS = [-1002562283915]  # ID –∞–¥–º–∏–Ω–æ–≤
NEW_CHAT_ID = -1002562283915
DATA_FILE = "users.json"
users = {}
pending_topups = {}
pending_withdrawals = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_keyboard = ReplyKeyboardMarkup(
    [["üìà –î–µ–ø–æ–∑–∏—Ç", "üíº –ö–æ—à–µ–ª—ë–∫"], ["üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ"]],
    resize_keyboard=True,
    one_time_keyboard=False
)

wallet_keyboard = ReplyKeyboardMarkup(
    [["üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", "üí∏ –í—ã–≤–µ—Å—Ç–∏"], ["üîô –Ω–∞ –≥–ª–∞–≤–Ω—É—é"]],
    resize_keyboard=True,
    one_time_keyboard=False
)
payment_method_keyboard = ReplyKeyboardMarkup(
    [["üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", "üì± –°–ë–ü"], ["‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", "üîô –Ω–∞ –≥–ª–∞–≤–Ω—É—é"]],
    resize_keyboard=True,
    one_time_keyboard=True
)
back_to_main_keyboard = ReplyKeyboardMarkup(
    [["üîô –Ω–∞ –≥–ª–∞–≤–Ω—É—é"]],
    resize_keyboard=True,
    one_time_keyboard=True
)
deposit_keyboard = ReplyKeyboardMarkup(
    [["üì• –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", "üì§ –°–æ–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å"], ["üîô –Ω–∞ –≥–ª–∞–≤–Ω—É—é"]],
    resize_keyboard=True
)


def init_db():
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!)

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            username TEXT,
            balance REAL DEFAULT 0.0,
            deposits TEXT DEFAULT '[]',
            created_at TEXT,
            referrer_id INTEGER DEFAULT NULL,
            referral_level INTEGER DEFAULT 1,
            referrals_count INTEGER DEFAULT 0,
            last_updated TEXT
        )
    """)
    conn.commit()
    conn.close()

    # conn = sqlite3.connect("users.db")
    # cursor = conn.cursor()
    #
    # # –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ SQL-–∑–∞–ø—Ä–æ—Å–∞
    # cursor.execute("""
    #                CREATE TABLE IF NOT EXISTS users
    #                (
    #                    id
    #                    INTEGER
    #                    PRIMARY
    #                    KEY,
    #                    username
    #                    TEXT,
    #                    balance
    #                    REAL
    #                    DEFAULT
    #                    0.0,
    #                    deposits
    #                    TEXT
    #                    DEFAULT
    #                    '[]',
    #                    created_at
    #                    TEXT,
    #                    referrer_id
    #                    INTEGER
    #                    DEFAULT
    #                    NULL,
    #                    referral_level
    #                    INTEGER
    #                    DEFAULT
    #                    1,
    #                    referrals
    #                    INTEGER
    #                    DEFAULT
    #                    NULL
    #                )
    #                """)


def get_referrals_by_levels(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    level1 = []  # –ü—Ä—è–º—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ë)
    level2 = []  # –†–µ—Ñ–µ—Ä–∞–ª—ã —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –í)
    level3 = []  # –†–µ—Ñ–µ—Ä–∞–ª—ã 3-–≥–æ —É—Ä–æ–≤–Ω—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ì)

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (level1)
    if user_id in users:
        for uid, user_data in users.items():
            if user_data.get('referrer_id') == user_id:
                level1.append(uid)

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è (level2)
    for ref1_id in level1:
        if ref1_id in users:
            for uid, user_data in users.items():
                if user_data.get('referrer_id') == ref1_id:
                    level2.append(uid)

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Ç—Ä–µ—Ç—å–µ–≥–æ —É—Ä–æ–≤–Ω—è (level3)
    for ref2_id in level2:
        if ref2_id in users:
            for uid, user_data in users.items():
                if user_data.get('referrer_id') == ref2_id:
                    level3.append(uid)

    return {
        'level1': level1,
        'level2': level2,
        'level3': level3
    }


async def help_command(update: Union[Update, CallbackQuery], context: ContextTypes.DEFAULT_TYPE):
    if isinstance(update, CallbackQuery):
        message = update.message
    else:
        message = update.message

    photo = "https://keephere.ru/get/J7FNEF714fc7YyM/o/photo_5_2025-07-25_12-14-28.jpg"

    text = """
üìö –û–±—É—á–∞—é—â–∏–π –≥–∞–π–¥ –ø–æ TON STOCKER

1. –ü—Ä–∏–≥–ª–∞—à–∞–µ—Ç–µ –¥—Ä—É–∑–µ–π
2. –ü–æ–ø–æ–ª–Ω—è–µ—Ç–µ –±–∞–ª–∞–Ω—Å
3. –í—Å–µ –ø–æ–ª—É—á–∞—é—Ç –ø—Ä–∏–±—ã–ª—å –∫–∞–∂–¥—ã–π —á–∞—Å

–ß–∏—Ç–∞–π—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é:
    """

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ Telegraph
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìñ –û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é",
                              url="https://telegra.ph/Obuchayushchij-gajd-po-TON-STOCKER-07-23")]
    ])

    if isinstance(update, CallbackQuery):
        await message.reply_photo(photo=photo, caption=text, parse_mode="HTML", reply_markup=keyboard)
    else:
        await update.message.reply_photo(photo=photo, caption=text, parse_mode="HTML", reply_markup=keyboard)


async def referral_stats(update: Union[Update, CallbackQuery], context: ContextTypes.DEFAULT_TYPE):
    if isinstance(update, CallbackQuery):
        user_id = update.from_user.id
        message = update.message
    else:
        user_id = update.effective_user.id
        message = update.message

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º
    referrals = get_referrals_by_levels(user_id)

    ref_link = f"https://t.me/{(await context.bot.get_me()).username}?start=ref_{user_id}"

    photo = "https://keephere.ru/get/tMtNEF71zrQnZPD/o/photo_4_2025-07-25_12-14-28.jpg"

    text = (
        f"üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n\n"
        f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: <code>{ref_link}</code>\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"1Ô∏è‚É£ –£—Ä–æ–≤–µ–Ω—å: {len(referrals['level1'])} —á–µ–ª. (20 % )\n"
        f"2Ô∏è‚É£ –£—Ä–æ–≤–µ–Ω—å: {len(referrals['level2'])} —á–µ–ª. (3%)\n"
        f"3Ô∏è‚É£ –£—Ä–æ–≤–µ–Ω—å: {len(referrals['level3'])} —á–µ–ª. (1%)\n\n"
        f"üí∏ <b>–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:</b>\n"
        f"- 20% –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –ø—Ä—è–º—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
        f"- 3% –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ 2-–≥–æ —É—Ä–æ–≤–Ω—è\n"
        f"- 1% –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ 3-–≥–æ —É—Ä–æ–≤–Ω—è"
    )

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", url=f"https://t.me/share/url?url={ref_link}")]
    ])
    if isinstance(update, CallbackQuery):
        await message.reply_photo(photo=photo,
                                  caption=text, parse_mode="HTML", reply_markup=keyboard)
    else:
        await update.message.reply_photo(
            photo=photo, caption=text,
            parse_mode="HTML", reply_markup=keyboard)


def calculate_current_profit(deposits):
    total_profit = 0
    now = datetime.now()

    for deposit in deposits:
        # –û–±—ã—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å (4% –≤ –¥–µ–Ω—å)
        if 'start' in deposit:
            start_time = datetime.strptime(deposit['start'], "%Y-%m-%d %H:%M:%S")
            elapsed = now - start_time
            elapsed_hours = elapsed.total_seconds() / 3600
            hourly_profit = deposit['amount'] * 0.00166
            total_profit += hourly_profit * elapsed_hours

            if 'collected_profit' in deposit:
                total_profit -= deposit['collected_profit']

        # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã
        referral_profit = deposit.get('referral_profit', 0)
        collected_referral = deposit.get('collected_referral', 0)
        total_profit += (referral_profit - collected_referral)

    return max(0, total_profit)


async def update_deposit_message(context: ContextTypes.DEFAULT_TYPE, user_id):
    if user_id not in users:
        return

    user = users[user_id]
    if "last_deposit_msg_id" not in user:
        return

    deposits = user.get("deposits", [])
    total_invested = sum(d["amount"] for d in deposits)
    current_profit = calculate_current_profit(deposits)

    try:
        await context.bot.edit_message_text(
            chat_id=user_id,
            message_id=user["last_deposit_msg_id"],
            text=f"üì† <b>–ü—Ä–æ—Ü–µ–Ω—Ç:</b> 4% –≤ –¥–µ–Ω—å\n"
                 f"‚è±Ô∏è <b>–î–æ—Ö–æ–¥:</b> –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –µ–∂–µ—á–∞—Å–Ω–æ\n"
                 f"üìÜ <b>–°—Ä–æ–∫:</b> 60 –¥–Ω–µ–π\n\n"
                 f"üí≥ <b>–û–±—â–∏–π –≤–∫–ª–∞–¥:</b> {total_invested:.2f}‚ÇΩ\n"
                 f"üíµ <b>–ù–∞–∫–æ–ø–ª–µ–Ω–æ:</b> {current_profit:.2f}‚ÇΩ\n\n"
                 f"‚ÑπÔ∏è –ü—Ä–∏–±—ã–ª—å –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è",
            reply_markup=deposit_keyboard,
            parse_mode="HTML"
        )
    except:
        if f"deposit_update_{user_id}" in context.job_queue.jobs():
            context.job_queue.jobs()[f"deposit_update_{user_id}"].schedule_removal()


def load_users():
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    users.clear()

    try:
        cursor.execute("""
            SELECT id, username, balance, deposits, created_at, referrer_id, referral_level, referrals_count 
            FROM users
        """)

        for row in cursor.fetchall():
            try:
                users[row[0]] = {
                    "username": row[1],
                    "balance": float(row[2]),
                    "deposits": json.loads(row[3] or "[]"),
                    "created_at": row[4],
                    "referrer_id": row[5],
                    "referral_level": row[6] if row[6] else 1,
                    "referrals_count": row[7] if row[7] else 0  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                }
            except json.JSONDecodeError:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {row[0]}")
                users[row[0]] = {
                    "username": row[1],
                    "balance": float(row[2]),
                    "deposits": [],
                    "created_at": row[4],
                    "referrer_id": row[5],
                    "referral_level": row[6] if row[6] else 1,
                    "referrals_count": row[7] if row[7] else 0
                }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    finally:
        conn.close()


async def show_ref_tree(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    tree = build_ref_tree(user_id)
    await update.message.reply_text(f"üå≥ –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:\n{tree}")


def build_ref_tree(user_id, level=1, max_level=3):
    if level > max_level:
        return ""
    result = ""
    for uid, data in users.items():
        if data.get('referrer_id') == user_id:
            result += "  " * level + f"‚îî‚îÄ {data['username']} (–£—Ä. {level})\n"
            result += build_ref_tree(uid, level + 1)
    return result


def save_user(user_id):
    user = users.get(user_id)
    if not user:
        return

    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()

    try:
        cursor.execute("""
            INSERT INTO users (id, username, balance, deposits, created_at, referrer_id, referral_level, referrals_count)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ON CONFLICT(id) DO UPDATE SET
                username = excluded.username,
                balance = excluded.balance,
                deposits = excluded.deposits,
                created_at = excluded.created_at,
                referrer_id = excluded.referrer_id,
                referral_level = excluded.referral_level,
                referrals_count = excluded.referrals_count
        """, (
            user_id,
            user.get("username"),
            user.get("balance", 0.0),
            json.dumps(user.get("deposits", [])),
            user.get("created_at"),
            user.get("referrer_id"),
            user.get("referral_level", 1),
            user.get("referrals_count", 0)  # –í–∞–∂–Ω–æ–µ –ø–æ–ª–µ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        ))
        conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    finally:
        conn.close()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat_id = update.effective_chat.id

    moscow_tz = pytz.timezone('Europe/Moscow')
    current_date_moscow = datetime.now(moscow_tz)
    formatted_date = current_date_moscow.strftime("%d.%m.%Y")

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if chat_id not in users:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users[chat_id] = {
            'username': user.username or user.full_name,
            'balance': 0.0,
            'deposits': [],
            'created_at': formatted_date,
            'referrer_id': None,
            'referral_level': 1,
            'referrals_count': 0,
            'is_ref_used': False  # –§–ª–∞–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Ñ—Å—Å—ã–ª–∫–∏
        }
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        if users[chat_id].get('is_ref_used', False):
            if context.args and len(context.args) > 0 and context.args[0].startswith('ref_'):
                await update.message.reply_text(
                    "‚ö† –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ",
                    reply_markup=main_keyboard
                )
            return await show_main_menu(update)

    save_user(chat_id)

    # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    if context.args and len(context.args) > 0 and context.args[0].startswith('ref_'):
        try:
            referrer_id = int(context.args[0][4:])

            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            if referrer_id == chat_id:
                await update.message.reply_text(
                    "‚ùå –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É",
                    reply_markup=main_keyboard
                )
            elif users[chat_id].get('referrer_id'):
                await update.message.reply_text(
                    "‚ùå –†–µ—Ñ–µ—Ä–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∫–∞–∑–∞–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑",
                    reply_markup=main_keyboard
                )
            else:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –ø–∞–º—è—Ç–∏
                if referrer_id not in users:
                    load_user_from_db(referrer_id)

                if referrer_id in users:
                    # –§–∏–∫—Å–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                    users[chat_id]['referrer_id'] = referrer_id
                    users[chat_id]['is_ref_used'] = True
                    users[referrer_id]['referrals_count'] += 1

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    save_user(chat_id)
                    save_user(referrer_id)

                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
                    try:
                        await context.bot.send_message(
                            chat_id=referrer_id,
                            text=f"üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!\n"
                                 f"üë§ @{user.username or user.full_name}\n"
                                 f"üÜî ID: {chat_id}\n"
                                 f"–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {users[referrer_id]['referrals_count']}"
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                else:
                    await update.message.reply_text(
                        "‚ö† –†–µ—Ñ–µ—Ä–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ",
                        reply_markup=main_keyboard
                    )
        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ—Å—Å—ã–ª–∫–∏: {e}")

    # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(update)


async def show_main_menu(update: Update):
    await update.message.reply_text(
        """
üåê TON STOCKER ‚Äî –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–∏–Ω–µ—Ä–≥–∏–∏, –≥–¥–µ –∫–∞–∂–¥—ã–π –≤–∫–ª–∞–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ç–µ–±—è –∏ —Ç–≤–æ—ë –æ–∫—Ä—É–∂–µ–Ω–∏–µ.
üîó –ó–¥–µ—Å—å —Ç—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ—à—å ‚Äî —Ç—ã –∑–∞–ø—É—Å–∫–∞–µ—à—å —Ü–µ–ø–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é —Ä–æ—Å—Ç–∞.
    
üìà –ü–æ—á–µ–º—É TON STOCKER?
üîπ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –æ—Ç 4% –µ–∂–µ–¥–Ω–µ–≤–Ω–æ ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω—ã–π, –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π –¥–æ—Ö–æ–¥ —Å –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è
üîπ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ 3 —É—Ä–æ–≤–Ω—è ‚Äî –ø–æ–ª—É—á–∞–π –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ, –ø–æ–º–æ–≥–∞—è –¥—Ä—É–≥–∏–º –≤—ã–π—Ç–∏ –Ω–∞ –ø—É—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥—ã
üîπ –ü—Ä–æ–∑—Ä–∞—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π ‚Äî –∫–∞–∂–¥—ã–π —á–∞—Å, –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É, —Ç–≤–æ–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç–∞—é—Ç
üîπ –ë–µ–∑ –≥—Ä–∞–Ω–∏—Ü ‚Äî –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –æ—Ç 10 ‚ÇΩ

üß¨ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?
1. –í–Ω–æ—Å–∏—à—å —Å—É–º–º—É ‚Äî –Ω–∞—á–∏–Ω–∞–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Ö–æ–¥
2. –î–µ–ª–∏—à—å—Å—è —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π ‚Äî —Å–æ–∑–¥–∞–µ—à—å –∫–æ–º–∞–Ω–¥—É
3. –ü–æ–ª—É—á–∞–µ—à—å –±–æ–Ω—É—Å—ã –¥–æ 24% –æ—Ç –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö
4. –ß–µ–º –±–æ–ª—å—à–µ –∫–æ–º–∞–Ω–¥–∞ ‚Äî —Ç–µ–º –≤—ã—à–µ —Ç–≤–æ–π –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥

ü•á –¢–≤–æ—è —Å–∏–ª–∞ ‚Äî –≤ —Ç–≤–æ—ë–º –∫—Ä—É–≥–µ
–í —ç—Ç–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ —Ç—ã –Ω–µ –æ–¥–∏–Ω.
–¢—ã ‚Äî –ª–∏–¥–µ—Ä. –¢—ã ‚Äî –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç–µ–ª—å.
–¢—ã ‚Äî —á–∞—Å—Ç—å —Ä–∞—Å—Ç—É—â–µ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã–∏–≥—Ä—ã–≤–∞—é—Ç –≤—Å–µ.

‚ö° –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è. –ù–∞—á–Ω–∏ —Ä–æ—Å—Ç —É–∂–µ —Å–µ–≥–æ–¥–Ω—è.
¬´–ù–µ –∂–¥–∏ —á—É–¥–∞. –°–æ–∑–¥–∞–π –µ–≥–æ.¬ª
        """,

        reply_markup=main_keyboard,
        parse_mode="HTML"
    )


async def wallet_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_data = users.get(chat_id, {})

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if chat_id not in users:
        users[chat_id] = {
            "username": update.effective_user.username or update.effective_user.full_name or str(chat_id),
            "balance": 0.0,
            "deposits": [],
            "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        save_user(chat_id)
        user_data = users[chat_id]

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º username
    username = user_data.get('username', '')
    if username and not username.startswith('@'):
        username = f"@{username}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å
    balance = user_data.get("balance", 0.0)
    if not isinstance(balance, (int, float)):
        try:
            balance = float(balance)
        except (ValueError, TypeError):
            balance = 0.0
            users[chat_id]["balance"] = 0.0
            save_user(chat_id)

    await update.message.reply_photo(
        photo="https://keephere.ru/get/nRRNEF71RHjvt4s/o/photo_6_2025-07-25_12-14-28.jpg",
        caption=f"""
üíé <b>–í–∞—à –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å</b> üíé

<b>üÜî ID:</b> <code>{chat_id}</code>
<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å:</b> {username}
<b>üìÖ –° –Ω–∞–º–∏ —Å:</b> {user_data.get("created_at", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")}

<b>üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b>
<b>‚û§ {balance:.2f} ‚ÇΩ</b> 

<i>–í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤—Å–µ–≥–¥–∞ –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π</i>

‚ú® <i>–ö–∞–∂–¥—ã–π —Ä—É–±–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤–∞—Å!</i>
    """,
        parse_mode=ParseMode.HTML,
        reply_markup=wallet_keyboard
    )


async def topup_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–º–µ–Ω–∏—Ç—å
    if user_id in pending_topups:
        await update.message.reply_text(
            "‚ùó –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.\n"
            "‚ùå –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—É—â—É—é.",
            reply_markup=ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é"], ["üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é"]], resize_keyboard=True)
        )
        return ConversationHandler.END

    await update.message.reply_text(
        "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=payment_method_keyboard
    )
    return WAIT_PAYMENT_METHOD


async def topup_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    cancel_keyboard = ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)

    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        return await cancel_operation(update, context)

    try:
        amount = float(text.replace(",", "."))
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")

        payment_method = context.user_data.get('payment_method', '')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Å—É–º–º
        if "–∫—Ä–∏–ø—Ç" in payment_method.lower() and amount < 500:
            await update.message.reply_text(
                "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π: 500 RUB\n"
                "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–Ω–æ–≤–æ:",
                reply_markup=cancel_keyboard
            )
            return WAIT_CRYPTO_AMOUNT

        elif amount < 100:
            await update.message.reply_text(
                "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 100 RUB\n"
                "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–Ω–æ–≤–æ:",
                reply_markup=cancel_keyboard
            )
            return WAIT_TOPUP_AMOUNT

    except (ValueError, TypeError):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 50.5):",
            reply_markup=cancel_keyboard
        )
        return WAIT_TOPUP_AMOUNT if "–∫—Ä–∏–ø—Ç" not in payment_method.lower() else WAIT_CRYPTO_AMOUNT

    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
    pending_topups[user_id] = {
        'amount': amount,
        'timestamp': datetime.now().isoformat(),
        'username': update.effective_user.username or update.effective_user.full_name or str(user_id),
        'payment_method': payment_method
    }

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    for admin in ADMINS:
        try:
            await context.bot.send_message(
                chat_id=admin,
                text=(
                    f"üü¢ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</b>\n"
                    f"üí≥ –ú–µ—Ç–æ–¥: <b>{payment_method}</b>\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.full_name}\n"
                    f"üîó @{update.effective_user.username}\n"
                    f"üÜî ID: <code>{user_id}</code>\n"
                    f"üí∞ –°—É–º–º–∞: <b>{amount:.2f} RUB</b>"
                ),
                reply_markup=InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"topup_confirm:{user_id}"),
                        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"topup_cancel:{user_id}")
                    ]
                ]),
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin}: {e}")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(
        f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {amount:.2f} RUB —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: <b>{payment_method}</b>\n\n"
        "‚è≥ <b>–ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç</b>\n\n"
        "‚ÑπÔ∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        reply_markup=main_keyboard,
        parse_mode="HTML"
    )

    return ConversationHandler.END


async def crypto_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ topup_amount, —Ç–∞–∫ –∫–∞–∫ –ª–æ–≥–∏–∫–∞ —Ç–µ–ø–µ—Ä—å –µ–¥–∏–Ω–∞—è
    return await topup_amount(update, context)


async def withdraw_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫
    active_withdrawals = any(req['user_id'] == user_id for req in pending_withdrawals.values())
    if active_withdrawals:
        await update.message.reply_text(
            "‚ùó –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥.",
            reply_markup=main_keyboard
        )
        return ConversationHandler.END

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data['withdraw_state'] = WAIT_WITHDRAW_METHOD

    await update.message.reply_text(
        "üí∏ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞:\n\n"
        "üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ (–º–∏–Ω. 100 RUB)\n"
        "üì± –°–ë–ü (–º–∏–Ω. 100 RUB)\n"
        "‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (–º–∏–Ω. 500 RUB)",
        reply_markup=ReplyKeyboardMarkup(
            [
                ["üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", "üì± –°–ë–ü"],
                ["‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", "‚ùå –û—Ç–º–µ–Ω–∞"]
            ],
            resize_keyboard=True
        )
    )
    return WAIT_WITHDRAW_METHOD


async def select_withdraw_method(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        return await cancel_operation(update, context)

    if text not in ["üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", "üì± –°–ë–ü", "‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞"]:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫",
            reply_markup=ReplyKeyboardMarkup(
                [["üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", "üì± –°–ë–ü"],
                 ["‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", "‚ùå –û—Ç–º–µ–Ω–∞"]],
                resize_keyboard=True
            )
        )
        return WAIT_WITHDRAW_METHOD

    context.user_data["withdraw_method"] = text
    context.user_data['withdrawal_state'] = WAIT_WITHDRAW_AMOUNT

    await update.message.reply_text(
        f"üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ ({text}):",
        reply_markup=ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
    )
    return WAIT_WITHDRAW_AMOUNT


async def withdraw_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.strip() == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_operation(update, context)
        return ConversationHandler.END

    try:
        amount = float(update.message.text.replace(",", "."))
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
        method = context.user_data.get("withdraw_method", "").lower()
        if "–∫–∞—Ä—Ç" in method and amount < 100:
            raise ValueError("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –∫–∞—Ä—Ç—ã: 100 RUB")
        if "—Å–±–ø" in method and amount < 100:
            raise ValueError("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –°–ë–ü: 100 RUB")
        if "–∫—Ä–∏–ø—Ç" in method and amount < 500:
            raise ValueError("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –∫—Ä–∏–ø—Ç—ã: 500 RUB")

        if amount > users[update.effective_user.id]["balance"]:
            raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ë–∞–ª–∞–Ω—Å: {users[update.effective_user.id]['balance']:.2f} RUB")

    except ValueError as e:
        await update.message.reply_text(
            f"‚ùå {str(e)}\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚ùå –û—Ç–º–µ–Ω–∞':",
            reply_markup=ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        )
        return WAIT_WITHDRAW_AMOUNT

    context.user_data["withdraw_amount"] = amount
    await update.message.reply_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è (–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã/—Ç–µ–ª–µ—Ñ–æ–Ω–∞/–∫—Ä–∏–ø—Ç–æ-–∫–æ—à–µ–ª—å–∫–∞):",
        reply_markup=ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
    )
    return WAIT_REQUISITES


async def select_payment_method(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    cancel_keyboard = ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        return await cancel_operation(update, context)
    elif text == "üîô –Ω–∞ –≥–ª–∞–≤–Ω—É—é":
        return await cancel_operation(update, context)
    context.user_data['payment_method'] = text

    if text == "üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞":
        await update.message.reply_text(
            "üí≥ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π</b>:\n\n"
            "üè¶ –ë–∞–Ω–∫: –¢–∏–Ω—å–∫–æ—Ñ—Ñ\n"
            "üì§ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: <code>5536 9137 2845 9012</code>\n"
            "üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤\n\n"
            "‚úÖ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n"
            "–û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 15 –º–∏–Ω—É—Ç.\n\n"
            "üí∏ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ RUB:",
            reply_markup=cancel_keyboard,
            parse_mode="HTML"
        )
        return WAIT_TOPUP_AMOUNT

    elif text == "üì± –°–ë–ü":
        await update.message.reply_text(
            "üì± <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ –°–ë–ü</b>:\n\n"
            "üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <code>+79123456789</code>\n"
            "üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤\n\n"
            "‚úÖ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n"
            "–û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 5 –º–∏–Ω—É—Ç.\n\n"
            "üí∏ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ RUB:",
            reply_markup=cancel_keyboard,
            parse_mode="HTML"
        )
        return WAIT_TOPUP_AMOUNT

    elif text == "‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞":
        await update.message.reply_text(
            "‚Çø <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π</b>:\n\n"
            "üî∑ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: USDT TRC20\n"
            "üìÆ –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: <code>TBvZ1K4bLjLQ9Q7x8Jz3kPqA2nW5rRtYy</code>\n\n"
            "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:\n"
            "1. –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ USDT\n"
            "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Å–µ—Ç—å TRC20\n"
            "3. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 30 –º–∏–Ω—É—Ç\n\n"
            "üí∏ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ RUB:",
            reply_markup=cancel_keyboard,
            parse_mode="HTML"
        )
        return WAIT_CRYPTO_AMOUNT


async def withdraw_requisites(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_operation(update, context)
        return ConversationHandler.END

    if len(text) < 5:
        await update.message.reply_text(
            "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:",
            reply_markup=ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        )
        return WAIT_REQUISITES

    amount = context.user_data.get("withdraw_amount")
    method = context.user_data.get("withdraw_method")

    if not amount or not method:
        await update.message.reply_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–≤–æ–¥–∞ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=main_keyboard
        )
        return ConversationHandler.END

    request_id = f"{user_id}_{datetime.now().timestamp()}"
    pending_withdrawals[request_id] = {
        "user_id": user_id,
        "amount": amount,
        "method": method,
        "requisites": text,
        "timestamp": datetime.now().isoformat(),
        "username": users[user_id].get('username', f'user_{user_id}')
    }

    await update.message.reply_text(
        "‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        "‚è≥ –û–±—ã—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 1 —á–∞—Å–∞.\n"
        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.",
        reply_markup=main_keyboard
    )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    for admin in ADMINS:
        try:
            await context.bot.send_message(
                chat_id=admin,
                text=(
                    f"üî¥ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥\n"
                    f"üë§ {update.effective_user.full_name} (@{update.effective_user.username})\n"
                    f"üÜî ID: {user_id}\n"
                    f"üí∏ –°—É–º–º–∞: {amount:.2f} RUB\n"
                    f"üìù –ú–µ—Ç–æ–¥: {method}\n"
                    f"üîë –†–µ–∫–≤–∏–∑–∏—Ç—ã: {text}\n"
                    f"üÜî –ó–∞—è–≤–∫–∞: {request_id}"
                ),
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"withdraw_confirm:{request_id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"withdraw_cancel:{request_id}")
                ]])
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin}: {e}")

    return ConversationHandler.END


async def unified_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    logger.info(f"Callback received: {data} from user {query.from_user.id}")

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞" (–¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º)
        if data == "show_ref_stats":
            await referral_stats(query, context)
            await query.edit_message_reply_markup(reply_markup=None)
            return

        elif data == "help_with_bot":
            await help_command(query, context)
            await query.edit_message_reply_markup(reply_markup=None)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        if query.from_user.id not in ADMINS and query.message.chat.id not in ADMINS:
            logger.warning(f"Unauthorized admin attempt from {query.from_user.id}")
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        elif data.startswith("topup_confirm:"):
            user_id = int(data.split(":")[1])
            request = pending_topups.get(user_id)

            if not request:
                logger.warning(f"Topup request not found for user {user_id}")
                await query.edit_message_text("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
                return

            amount = request['amount']

            if user_id not in users:
                users[user_id] = {
                    'balance': 0.0,
                    'deposits': [],
                    'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                    'username': request.get('username', f'user_{user_id}'),
                    'referrer_id': None,
                    'referral_level': 1
                }

            users[user_id]["balance"] += amount
            save_user(user_id)
            pending_topups.pop(user_id, None)

            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount:.2f} RUB!\n\n"
                         f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {users[user_id]['balance']:.2f} RUB"
                )
            except Exception as e:
                logger.error(f"Error notifying user {user_id}: {e}")

            await query.edit_message_text(
                f"üü¢ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {request.get('username', 'N/A')}\n"
                f"üÜî ID: {user_id}\n"
                f"üí≥ –°—É–º–º–∞: {amount:.2f} RUB\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
            )

        elif data.startswith("topup_cancel:"):
            user_id = int(data.split(":")[1])
            request = pending_topups.get(user_id)

            if not request:
                logger.warning(f"Topup request not found for user {user_id} (cancel)")
                await query.edit_message_text("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
                return

            pending_topups.pop(user_id, None)
            logger.info(f"Topup canceled for user {user_id}, amount: {request['amount']}")

            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text="‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                         "‚ÑπÔ∏è –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —ç—Ç–æ –æ—à–∏–±–∫–æ–π, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
                )
            except Exception as e:
                logger.error(f"Error notifying user {user_id}: {e}")

            await query.edit_message_text(
                f"üî¥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {request.get('username', 'N/A')}\n"
                f"üÜî ID: {user_id}\n"
                f"üí≥ –°—É–º–º–∞: {request['amount']:.2f} RUB\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
            )

        elif data.startswith("withdraw_confirm:"):
            request_id = data.split(":")[1]
            req = pending_withdrawals.get(request_id)

            if not req:
                logger.warning(f"Withdrawal request not found: {request_id}")
                await query.edit_message_text("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
                return

            user_id = req["user_id"]
            amount = req["amount"]
            logger.info(f"Processing withdraw confirm for user {user_id}, amount: {amount}")

            if user_id not in users:
                users[user_id] = {
                    'balance': 0.0,
                    'deposits': [],
                    'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                    'username': req.get('username', f'user_{user_id}'),
                    'referrer_id': None,
                    'referral_level': 1
                }

            if users[user_id]["balance"] >= amount:
                users[user_id]["balance"] -= amount
                save_user(user_id)
                pending_withdrawals.pop(request_id, None)

                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount:.2f} RUB –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                             f"üìù –†–µ–∫–≤–∏–∑–∏—Ç—ã: {req['requisites']}\n"
                             f"‚è≥ –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞.\n\n"
                             f"üí∞ –û—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–∞–Ω—Å–∞: {users[user_id]['balance']:.2f} RUB"
                    )
                except Exception as e:
                    logger.error(f"Error notifying user {user_id}: {e}")

                await query.edit_message_text(
                    f"üü¢ –í—ã–≤–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω\n"
                    f"üë§ {req.get('username', 'N/A')}\n"
                    f"üÜî {user_id}\n"
                    f"üí∏ –°—É–º–º–∞: {amount:.2f} RUB\n"
                    f"üìù –†–µ–∫–≤–∏–∑–∏—Ç—ã: {req['requisites']}\n"
                    f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
                )
            else:
                await query.edit_message_text(
                    f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                    f"üë§ {req.get('username', 'N/A')}\n"
                    f"üÜî {user_id}\n"
                    f"üí∏ –ó–∞–ø—Ä–æ—à–µ–Ω–æ: {amount:.2f} RUB\n"
                    f"üí∞ –ò–º–µ–µ—Ç—Å—è: {users[user_id]['balance']:.2f} RUB"
                )

        elif data.startswith("withdraw_cancel:"):
            request_id = data.split(":")[1]
            req = pending_withdrawals.get(request_id)

            if not req:
                logger.warning(f"Withdrawal request not found: {request_id} (cancel)")
                await query.edit_message_text("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
                return

            pending_withdrawals.pop(request_id, None)
            logger.info(f"Withdrawal canceled for request {request_id}")

            try:
                await context.bot.send_message(
                    chat_id=req["user_id"],
                    text=f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {req['amount']:.2f} RUB –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n"
                         "‚ÑπÔ∏è –ü—Ä–∏—á–∏–Ω–∞: —Ä–µ—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
                         "–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —ç—Ç–æ –æ—à–∏–±–∫–æ–π, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
                )
            except Exception as e:
                logger.error(f"Error notifying user {req['user_id']}: {e}")

            await query.edit_message_text(
                f"üî¥ –í—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω\n"
                f"üë§ {req.get('username', 'N/A')}\n"
                f"üÜî {req['user_id']}\n"
                f"üí∏ –°—É–º–º–∞: {req['amount']:.2f} RUB\n"
                f"üìù –†–µ–∫–≤–∏–∑–∏—Ç—ã: {req['requisites']}\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
            )

        else:
            logger.warning(f"Unknown callback data: {data}")
            await query.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

    except Exception as e:
        logger.error(f"Error in callback handler: {e}", exc_info=True)
        await query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        await query.edit_message_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É"
        )


async def update_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat_id = update.effective_chat.id

    users[chat_id]['username'] = user.username or user.full_name or str(chat_id)
    save_user(chat_id)

    await update.message.reply_text(
        "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!",
        reply_markup=main_keyboard
    )


async def calculator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_photo(
        photo="https://keephere.ru/get/BssNEF71mGmzizU/o/photo_2_2025-07-25_12-14-28.jpg",
        # –∏–ª–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: open("path.jpg", "rb")
        caption=f"""
üí° <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏</b> üí°

üî¢ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞</b>  

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ 1000
‚Ä¢ 500.50
‚Ä¢ 25000

üí∞ <i>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 100 ‚ÇΩ</i>
üìà <i>–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: 4% –µ–∂–µ–¥–Ω–µ–≤–Ω–æ</i>

–ù–∞–∂–º–∏—Ç–µ <b>"üîô –Ω–∞ –≥–ª–∞–≤–Ω—É—é"</b>, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è

üåü <i>–£–∑–Ω–∞–π—Ç–µ, —Å–∫–æ–ª—å–∫–æ —Å–º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å!</i>
        """,
        reply_markup=back_to_main_keyboard,
        parse_mode=ParseMode.HTML
    )
    context.user_data["awaiting_calc"] = True


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    text_lower = text.lower()
    MIN_INVEST_AMOUNT = 10  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in users:
        users[user_id] = {
            "username": update.effective_user.username or update.effective_user.full_name or str(user_id),
            "balance": 0.0,
            "deposits": [],
            "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "last_activity": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        save_user(user_id)
    else:
        users[user_id]["last_activity"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        save_user(user_id)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if context.user_data.get('invest_state') == WAIT_INVEST_AMOUNT:
        if text_lower in ["–æ—Ç–º–µ–Ω–∞", "üîô –Ω–∞ –≥–ª–∞–≤–Ω—É—é"]:
            await cancel_operation(update, context)
            return ConversationHandler.END
        try:
            amount = float(text.replace(",", "."))
            if amount < MIN_INVEST_AMOUNT:
                await update.message.reply_text(
                    f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π ‚Äî {MIN_INVEST_AMOUNT} RUB\n"
                    f"–í—ã –≤–≤–µ–ª–∏: {amount:.2f} RUB\n\n"
                    "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –±√≥–ª—å—à—É—é —Å—É–º–º—É:",
                    reply_markup=ReplyKeyboardMarkup(
                        [["üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å"], ["üîô –Ω–∞ –≥–ª–∞–≤–Ω—É—é"]],
                        resize_keyboard=True
                    ),
                    parse_mode="HTML"
                )
                return WAIT_INVEST_AMOUNT

            if amount > users[user_id]["balance"]:
                await update.message.reply_text(
                    f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {users[user_id]['balance']:.2f} RUB\n"
                    "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å:",
                    reply_markup=ReplyKeyboardMarkup(
                        [["üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å"], ["üîô –Ω–∞ –≥–ª–∞–≤–Ω—É—é"]],
                        resize_keyboard=True
                    ),
                    parse_mode="HTML"
                )
                return WAIT_INVEST_AMOUNT

            # –£—Å–ø–µ—à–Ω–æ–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            add_deposit(user_id, amount)
            users[user_id]["balance"] -= amount
            save_user(user_id)
            context.user_data.clear()

            await update.message.reply_text(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {amount:.2f} RUB\n"
                f"üíº –û–±—â–∏–π –≤–∫–ª–∞–¥: {sum(d['amount'] for d in users[user_id]['deposits']):.2f} RUB\n"
                f"üí∞ –û—Å—Ç–∞—Ç–æ–∫: {users[user_id]['balance']:.2f} RUB",
                reply_markup=deposit_keyboard,
                parse_mode="HTML"
            )
            logger.info(f"–í—ã–∑—ã–≤–∞–µ–º process_referral_bonuses –¥–ª—è {user_id} —Å —Å—É–º–º–æ–π {amount}")
            await (process_referral_bonuses(user_id, amount, context))
            return ConversationHandler.END

        except ValueError:
            await update.message.reply_text(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ú–∏–Ω–∏–º—É–º ‚Äî {MIN_INVEST_AMOUNT} RUB\n"
                "–ü—Ä–∏–º–µ—Ä: 10 –∏–ª–∏ 50.5\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=ReplyKeyboardMarkup(
                    [["üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å"], ["üîô –Ω–∞ –≥–ª–∞–≤–Ω—É—é"]],
                    resize_keyboard=True
                ),
                parse_mode="HTML"
            )
            return WAIT_INVEST_AMOUNT

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å"
    elif text_lower in ["üì• –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", "–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", "–≤–ª–æ–∂–∏—Ç—å"]:
        user_balance = users[user_id]["balance"]

        if user_balance < MIN_INVEST_AMOUNT:
            context.user_data['invest_state'] = WAIT_INVEST_AMOUNT
            await update.message.reply_text(
                f"‚ö†Ô∏è <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π ‚Äî {MIN_INVEST_AMOUNT} RUB</b>\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: <b>{user_balance:.2f} RUB</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ—Ç <b>10 RUB</b> –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å:",
                reply_markup=ReplyKeyboardMarkup(
                    [["üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å"], ["üîô –Ω–∞ –≥–ª–∞–≤–Ω—É—é"]],
                    resize_keyboard=True
                ),
                parse_mode="HTML"
            )
            return WAIT_INVEST_AMOUNT
        else:
            context.user_data['invest_state'] = WAIT_INVEST_AMOUNT
            await update.message.reply_text(
                f"üí∏ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–æ—Ç {MIN_INVEST_AMOUNT} RUB):</b>\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ: <b>{user_balance:.2f} RUB</b>\n"
                "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>¬´üîô –Ω–∞ –≥–ª–∞–≤–Ω—É—é¬ª</b> –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
                reply_markup=back_to_main_keyboard,
                parse_mode="HTML"
            )
            return WAIT_INVEST_AMOUNT

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
    if 'withdraw_state' in context.user_data:
        current_state = context.user_data['withdraw_state']

        if current_state == WAIT_WITHDRAW_METHOD:
            if text in ["üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", "üì± –°–ë–ü", "‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞"]:
                context.user_data['withdraw_method'] = text
                context.user_data['withdraw_state'] = WAIT_WITHDRAW_AMOUNT
                min_amount = 500 if text == "‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞" else 100

                await update.message.reply_text(
                    f"üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ ({text}, –º–∏–Ω. {min_amount} RUB):\n"
                    "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚ùå –û—Ç–º–µ–Ω–∞' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞",
                    reply_markup=ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True),
                    parse_mode="HTML"
                )
                return WAIT_WITHDRAW_AMOUNT

            elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
                await cancel_operation(update, context)
                return ConversationHandler.END

            else:
                await update.message.reply_text(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
                    reply_markup=ReplyKeyboardMarkup(
                        [["üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", "üì± –°–ë–ü"],
                         ["‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", "‚ùå –û—Ç–º–µ–Ω–∞"]],
                        resize_keyboard=True
                    ),
                    parse_mode="HTML"
                )
                return WAIT_WITHDRAW_METHOD

        elif current_state == WAIT_WITHDRAW_AMOUNT:
            if text == "‚ùå –û—Ç–º–µ–Ω–∞":
                await cancel_operation(update, context)
                return ConversationHandler.END

            try:
                amount = float(text.replace(",", "."))
                method = context.user_data.get('withdraw_method', '')
                min_amount = 500 if "–∫—Ä–∏–ø—Ç" in method.lower() else 100

                if amount < min_amount:
                    await update.message.reply_text(
                        f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è {method}: {min_amount} RUB\n"
                        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–Ω–æ–≤–æ:",
                        reply_markup=ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True),
                        parse_mode="HTML"
                    )
                    return WAIT_WITHDRAW_AMOUNT

                if amount > users[user_id]["balance"]:
                    await update.message.reply_text(
                        f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {users[user_id]['balance']:.2f} RUB",
                        reply_markup=ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True),
                        parse_mode="HTML"
                    )
                    return WAIT_WITHDRAW_AMOUNT

                context.user_data['withdraw_amount'] = amount
                context.user_data['withdraw_state'] = WAIT_REQUISITES

                await update.message.reply_text(
                    "üìù –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è (–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã/—Ç–µ–ª–µ—Ñ–æ–Ω–∞/–∫—Ä–∏–ø—Ç–æ-–∫–æ—à–µ–ª—å–∫–∞):\n"
                    "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚ùå –û—Ç–º–µ–Ω–∞' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞",
                    reply_markup=ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True),
                    parse_mode="HTML"
                )
                return WAIT_REQUISITES

            except ValueError:
                await update.message.reply_text(
                    "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ 500.50)",
                    reply_markup=ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True),
                    parse_mode="HTML"
                )
                return WAIT_WITHDRAW_AMOUNT

        elif current_state == WAIT_REQUISITES:
            if text == "‚ùå –û—Ç–º–µ–Ω–∞":
                await cancel_operation(update, context)
                return ConversationHandler.END

            if len(text) < 5:
                await update.message.reply_text(
                    "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:",
                    reply_markup=ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True),
                    parse_mode="HTML"
                )
                return WAIT_REQUISITES

            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
            withdraw_amount = context.user_data['withdraw_amount']
            withdraw_method = context.user_data['withdraw_method']
            username = update.effective_user.username or update.effective_user.full_name

            request_id = f"{user_id}_{datetime.now().timestamp()}"
            pending_withdrawals[request_id] = {
                "user_id": user_id,
                "amount": withdraw_amount,
                "method": withdraw_method,
                "requisites": text,
                "timestamp": datetime.now().isoformat(),
                "username": username
            }

            context.user_data.clear()

            await update.message.reply_text(
                "‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                "‚è≥ –û–±—ã—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 1 —á–∞—Å–∞.\n"
                "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.",
                reply_markup=main_keyboard,
                parse_mode="HTML"
            )

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
            for admin in ADMINS:
                try:
                    await context.bot.send_message(
                        chat_id=admin,
                        text=f"üî¥ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥\n"
                             f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
                             f"üÜî ID: {user_id}\n"
                             f"üí∏ –°—É–º–º–∞: {withdraw_amount:.2f} RUB\n"
                             f"üìù –ú–µ—Ç–æ–¥: {withdraw_method}\n"
                             f"üîë –†–µ–∫–≤–∏–∑–∏—Ç—ã: {text}\n"
                             f"üÜî –ó–∞—è–≤–∫–∞: {request_id}",
                        reply_markup=InlineKeyboardMarkup([
                            [
                                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"withdraw_confirm:{request_id}"),
                                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"withdraw_cancel:{request_id}")
                            ]
                        ]),
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin}: {e}")

            return ConversationHandler.END

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    if context.user_data.get("awaiting_calc"):
        if text_lower in ["–æ—Ç–º–µ–Ω–∞", "üîô –Ω–∞ –≥–ª–∞–≤–Ω—É—é"]:
            context.user_data.clear()
            await update.message.reply_text(
                "‚ùå –†–∞—Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=main_keyboard,
                parse_mode="HTML"
            )
            return ConversationHandler.END

        try:
            amount = float(text.replace(",", "."))
            if amount <= 0:
                raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")

            hourly = amount * 0.00166
            daily = amount * 0.04
            weekly = amount * 0.28
            monthly = amount * 1.2

            example = ""
            if amount >= 1000:
                example = f"\n\nüí° –ü—Ä–∏–º–µ—Ä: –ø—Ä–∏ –≤–∫–ª–∞–¥–µ {amount:.0f} RUB\n" \
                          f"–ó–∞ –º–µ—Å—è—Ü –≤—ã –ø–æ–ª—É—á–∏—Ç–µ ~{monthly:.0f} RUB –ø—Ä–∏–±—ã–ª–∏"

            await update.message.reply_text(
                f"üìä <b>–†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏</b> –¥–ª—è {amount:.2f} RUB:\n\n"
                f"‚è± <b>–í —á–∞—Å:</b> {hourly:.2f} RUB\n"
                f"üåû <b>–í –¥–µ–Ω—å:</b> {daily:.2f} RUB\n"
                f"üìÖ <b>–í –Ω–µ–¥–µ–ª—é:</b> {weekly:.2f} RUB\n"
                f"üóì <b>–í –º–µ—Å—è—Ü (30 –¥–Ω–µ–π):</b> {monthly:.2f} RUB"
                f"{example}\n\n"
                "‚ÑπÔ∏è –†–∞—Å—á–µ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Å—Ç–∞–≤–∫–µ 4% –≤ –¥–µ–Ω—å\n"
                "–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –µ–∂–µ—á–∞—Å–Ω–æ",
                reply_markup=main_keyboard,
                parse_mode="HTML"
            )
            context.user_data.clear()
        except ValueError:
            await update.message.reply_text(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ RUB (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000 –∏–ª–∏ 1250.50)",
                reply_markup=back_to_main_keyboard,
                parse_mode="HTML"
            )
        return ConversationHandler.END

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if text_lower == "üîô –Ω–∞ –≥–ª–∞–≤–Ω—É—é":
        await cancel_operation(update, context)
        return ConversationHandler.END

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
    if text_lower in ["üíº –∫–æ—à–µ–ª—ë–∫", "–∫–æ—à–µ–ª—ë–∫", "–±–∞–ª–∞–Ω—Å"]:
        await wallet_menu(update, context)
        return ConversationHandler.END

    elif text_lower in ["üìà –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "—Ä–∞—Å—á–µ—Ç"]:
        context.user_data["awaiting_calc"] = True
        await calculator(update, context)
        return WAIT_CALC_AMOUNT

    elif text_lower in ["‚ÑπÔ∏è –æ –ø—Ä–æ–µ–∫—Ç–µ", "–æ –ø—Ä–æ–µ–∫—Ç–µ", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"]:
        await about_project(update, context)
        return ConversationHandler.END

    elif text_lower in ["üìà –¥–µ–ø–æ–∑–∏—Ç", "–¥–µ–ø–æ–∑–∏—Ç", "–≤–∫–ª–∞–¥"]:
        await show_deposit_info(update, context)
        return ConversationHandler.END

    elif text_lower in ["üì§ —Å–æ–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å", "—Å–æ–±—Ä–∞—Ç—å", "–∑–∞–±—Ä–∞—Ç—å"]:
        await collect_profit(update, context)
        return ConversationHandler.END

    elif text_lower in ["üí≥ –ø–æ–ø–æ–ª–Ω–∏—Ç—å", "–ø–æ–ø–æ–ª–Ω–∏—Ç—å"]:
        if user_id in pending_topups:
            await update.message.reply_text(
                "‚ùó –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ.",
                reply_markup=ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é"], ["üîô –Ω–∞ –≥–ª–∞–≤–Ω—É—é"]], resize_keyboard=True),
                parse_mode="HTML"
            )
        else:
            await topup_start(update, context)
        return WAIT_PAYMENT_METHOD

    elif text_lower in ["üí∏ –≤—ã–≤–µ—Å—Ç–∏", "–≤—ã–≤–µ—Å—Ç–∏", "–≤—ã–≤–æ–¥"]:
        active_withdrawals = any(req['user_id'] == user_id for req in pending_withdrawals.values())
        if active_withdrawals:
            await update.message.reply_text(
                "‚ùó –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥.",
                reply_markup=main_keyboard,
                parse_mode="HTML"
            )
        else:
            context.user_data['withdraw_state'] = WAIT_WITHDRAW_METHOD
            await update.message.reply_text(
                "üí∏ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞:\n\n"
                "üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ (–º–∏–Ω. 100 RUB)\n"
                "üì± –°–ë–ü (–º–∏–Ω. 100 RUB)\n"
                "‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (–º–∏–Ω. 500 RUB)",
                reply_markup=ReplyKeyboardMarkup(
                    [
                        ["üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", "üì± –°–ë–ü"],
                        ["‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", "‚ùå –û—Ç–º–µ–Ω–∞"]
                    ],
                    resize_keyboard=True
                ),
                parse_mode="HTML"
            )
        return WAIT_WITHDRAW_METHOD

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    await update.message.reply_text(
        "üîç –Ø –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –∫–æ–º–∞–Ω–¥—É. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "üíº <b>–ö–æ—à–µ–ª–µ–∫</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º\n"
        "üìà <b>–î–µ–ø–æ–∑–∏—Ç</b> - –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏ –ø—Ä–∏–±—ã–ª—å\n"
        "üìä <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä</b> - —Ä–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏\n"
        "‚ÑπÔ∏è <b>–û –ø—Ä–æ–µ–∫—Ç–µ</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ üëá",
        reply_markup=main_keyboard,
        parse_mode="HTML"
    )
    return ConversationHandler.END


async def about_project(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –ü–û–î —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    buttons = [
        [InlineKeyboardButton("üí¨ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —á–∞—Ç", url="https://t.me/tonstocketchat")],
        [InlineKeyboardButton("üõ† –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä", url="https://t.me/g0dqq")],
        [InlineKeyboardButton("üéì –û–±—É—á–µ–Ω–∏–µ", callback_data="help_with_bot"),
         InlineKeyboardButton("üí∞ –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="show_ref_stats")]
    ]
    reply_markup = InlineKeyboardMarkup(buttons)

    about_text = """
üü¶ <b>Ton Stocker </b> - –í–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞! üü¶

üîπ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã 4%</b> - —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ –±–µ–∑ —Å–∫—Ä—ã—Ç—ã—Ö —É—Å–ª–æ–≤–∏–π
üîπ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è</b> - –ø—Ä–∏–±—ã–ª—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –µ–∂–µ—á–∞—Å–Ω–æ

üìà <b>–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å?</b>

‚úÖ <b>–ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</b> - –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
‚úÖ <b>–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç</b> - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç –≤—Å–µ–≥–æ 100 RUB
‚úÖ <b>–ì–∏–±–∫–∏–µ —É—Å–ª–æ–≤–∏—è</b> - –≤—ã–≤–æ–¥–∏—Ç–µ –ø—Ä–∏–±—ã–ª—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è

üíé <b>–ù–∞—à–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
- –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ RUB
- 3-—É—Ä–æ–≤–Ω–µ–≤–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
- –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –æ–ø–µ—Ä–∞—Ü–∏—è—Ö
- –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

üîê <b>–í–∞—à–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π:</b>
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
- –†–µ–≥—É–ª—è—Ä–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
- –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å–∏—Å—Ç–µ–º—ã

üì≤ <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å?</b>
1. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –æ—Ç 100 RUB
2. –ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ –ø—Ä–æ–µ–∫—Ç
3. –ü–æ–ª—É—á–∞–π—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ 4% –≤ –¥–µ–Ω—å
    """

    await update.message.reply_photo(
        photo="https://keephere.ru/get/Kd1NEF71qtNuHGW/o/photo_3_2025-07-25_12-14-28.jpg",
        caption=about_text,
        reply_markup=reply_markup,
        parse_mode="HTML"
    )


async def collect_profit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = users[user_id]

    total_profit = 0
    referral_profit = 0

    logger.info(f"–°–±–æ—Ä –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è {user_id}. –î–µ–ø–æ–∑–∏—Ç—ã: {user.get('deposits')}")

    for deposit in user.get("deposits", []):
        # –û–±—ã—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å
        if 'start' in deposit and 'amount' in deposit:
            start_time = datetime.strptime(deposit['start'], "%Y-%m-%d %H:%M:%S")
            elapsed = datetime.now() - start_time
            elapsed_hours = elapsed.total_seconds() / 3600
            profit = deposit['amount'] * 0.00166 * elapsed_hours - deposit.get('collected_profit', 0)
            total_profit += max(0, profit)
            deposit['collected_profit'] = deposit.get('collected_profit', 0) + profit

        # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å
        if deposit.get('is_referral', False):
            profit = deposit.get('referral_profit', 0) - deposit.get('collected_referral', 0)
            referral_profit += profit
            deposit['collected_referral'] = deposit.get('referral_profit', 0)

    total_profit += referral_profit

    if total_profit <= 0:
        await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è —Å–±–æ—Ä–∞.")
        return

    user['balance'] += total_profit
    save_user(user_id)

    await update.message.reply_text(
        f"üí∞ –í—ã–≤–µ–¥–µ–Ω–æ {total_profit:.2f} RUB!\n"
        f"üíº –ò–∑ –Ω–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã: {referral_profit:.2f} RUB\n"
        f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user['balance']:.2f} RUB",
        reply_markup=deposit_keyboard
    )


async def forum_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üí¨ <b>–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä—É–º Ton Stocket</b>\n\n"
        "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É:\n"
        "üåê forum.tonstocket.com\n\n"
        "–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ:\n"
        "- –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞\n"
        "- –û–±—Å—É–∂–¥–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π\n"
        "- –û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
        parse_mode="HTML"
    )


async def support_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üõ† <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å:\n"
        "üë®‚Äçüíª @TonSucketSupport\n"
        "üìß support@tonstocket.com\n\n"
        "‚åö –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: 24/7\n"
        "‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: 15 –º–∏–Ω—É—Ç",
        parse_mode="HTML"
    )


async def process_referral_bonuses(investor_id: int, amount: float, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ –ø—Ä–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    logger.info(f"–ù–∞—á–∞–ª–æ process_referral_bonuses –¥–ª—è {investor_id}")

    if investor_id not in users:
        logger.error(f"–ò–Ω–≤–µ—Å—Ç–æ—Ä {investor_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ø–æ—á–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    chain = []
    current_id = investor_id
    for level in range(1, 4):  # –ú–∞–∫—Å–∏–º—É–º 3 —É—Ä–æ–≤–Ω—è
        referrer_id = users[current_id].get('referrer_id')
        if not referrer_id or referrer_id not in users:
            break

        chain.append((referrer_id, level))
        current_id = referrer_id

    logger.info(f"–ù–∞–π–¥–µ–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞: {chain}")

    # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å—ã
    for referrer_id, level in chain:
        try:
            # –ü—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—è–º
            percent = [0.20, 0.03, 0.01][level - 1]
            bonus = round(amount * percent, 2)

            logger.info(f"–ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å {bonus} RUB –¥–ª—è {referrer_id} (—É—Ä–æ–≤–µ–Ω—å {level})")

            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è –±–æ–Ω—É—Å–æ–≤
            if 'deposits' not in users[referrer_id]:
                users[referrer_id]['deposits'] = []

            bonus_deposit = None
            for d in users[referrer_id]['deposits']:
                if d.get('is_referral', False):
                    bonus_deposit = d
                    break

            if not bonus_deposit:
                bonus_deposit = {
                    'amount': 0,
                    'start': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                    'is_referral': True,
                    'referral_profit': 0,
                    'collected_referral': 0
                }
                users[referrer_id]['deposits'].append(bonus_deposit)

            bonus_deposit['referral_profit'] += bonus
            save_user(referrer_id)

            logger.info(f"–ë–æ–Ω—É—Å —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω –¥–ª—è {referrer_id}")

            try:
                await context.bot.send_message(
                    chat_id=referrer_id,
                    text=f"üíé –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å {level}-–≥–æ —É—Ä–æ–≤–Ω—è!\n"
                         f"üí∞ +{bonus:.2f} RUB\n"
                         f"üíº –î–æ—Å—Ç—É–ø–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–°–æ–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å¬ª"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞: {e}")

    logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ process_referral_bonuses –¥–ª—è {investor_id}")


async def partners_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ù <b>–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
        "–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –¥–æ 20% —Å –¥–µ–ø–æ–∑–∏—Ç–æ–≤:\n"
        "1 —É—Ä–æ–≤–µ–Ω—å - 20%\n"
        "2 —É—Ä–æ–≤–µ–Ω—å - 3%\n"
        "3 —É—Ä–æ–≤–µ–Ω—å - 1%\n\n"
        "üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
        f"https://t.me/{(await context.bot.get_me()).username}?start=ref_{update.effective_user.id}",
        parse_mode="HTML"
    )


async def show_deposit_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = users[user_id]
    deposits = user.get("deposits", [])
    total_invested = sum(d["amount"] for d in deposits)
    current_profit = calculate_current_profit(deposits)

    photo = "https://keephere.ru/get/NItNEF71gih9a1R/o/photo_1_2025-07-25_12-14-28.jpg"
    text = f"""
üåü <b>–í–∞—à –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –¥–æ—Ö–æ–¥</b> üåü

<b>üìä –£—Å–ª–æ–≤–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>  

üèÜ <b>–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:</b> 4% –≤ —Å—É—Ç–∫–∏
‚è≥ <b>–ù–∞—á–∏—Å–ª–µ–Ω–∏—è:</b> –∫–∞–∂–¥—ã–π —á–∞—Å
üìÖ <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> 60 –¥–Ω–µ–π

<b>üíº –í–∞—à–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏</b>

üí∞ <b>–û–±—â–∏–π –≤–∫–ª–∞–¥:</b> {total_invested:.2f}‚ÇΩ
üìà <b>–ù–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å:</b> {current_profit:.2f}‚ÇΩ

üí° <i>–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è</i>
‚ú® <i>–í–∞—à–∏ –¥–µ–Ω—å–≥–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ –≤–∞—Å 24/7</i>


üöÄ <b>–£–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –∫–∞–ø–∏—Ç–∞–ª - –ø–æ–≤—ã—à–∞–π—Ç–µ –¥–æ—Ö–æ–¥!</b>
    """

    message = await update.message.reply_photo(
        photo=photo,
        caption=text,
        reply_markup=deposit_keyboard,
        parse_mode=ParseMode.HTML
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    user["last_deposit_msg_id"] = message.message_id

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –±—ã–ª–æ
    if context.job_queue and f"depositupdate{user_id}" in context.job_queue.jobs():
        context.job_queue.jobs()[f"depositupdate{user_id}"].schedule_removal()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    context.job_queue.run_repeating(
        callback=lambda ctx: update_deposit_message(ctx, user_id),
        interval=60.0,
        first=0,
        name=f"deposit_update_{user_id}"
    )


async def invest_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    try:
        amount = float(text.replace(",", "."))
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")

        if amount < MIN_INVEST_AMOUNT:
            await update.message.reply_text(
                f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: {MIN_INVEST_AMOUNT} RUB",
                reply_markup=main_keyboard
            )
            return WAIT_INVEST_AMOUNT

        if amount > users[user_id]["balance"]:
            await update.message.reply_text(
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {users[user_id]['balance']:.2f} RUB",
                reply_markup=main_keyboard
            )
            return WAIT_INVEST_AMOUNT

        # –°–æ–∑–¥–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç
        add_deposit(user_id, amount)
        users[user_id]["balance"] -= amount
        save_user(user_id)

        logger.info(f"–ó–∞–≤–µ—Ä—à–∏–ª–∏ process_referral_bonuses –¥–ª—è {user_id}")

        await update.message.reply_text(
            f"‚úÖ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {amount:.2f} RUB\n"
            f"üíº –î–æ—Ö–æ–¥ –Ω–∞—á–Ω–µ—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è —Å—Ä–∞–∑—É",
            reply_markup=deposit_keyboard
        )

        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É",
            reply_markup=main_keyboard
        )
        return WAIT_INVEST_AMOUNT


def add_deposit(user_id, amount):
    now = datetime.now()
    deposit = {
        "amount": amount,
        "start": now.strftime("%Y-%m-%d %H:%M:%S"),
        "last_profit": now.strftime("%Y-%m-%d %H:%M:%S"),
        "duration_days": 60,
        "referral_profit": 0,
        "collected_referral": 0
    }

    if user_id not in users:
        users[user_id] = {
            "username": f"user_{user_id}",
            "balance": 0,
            "deposits": [],
            "created_at": now.strftime("%Y-%m-%d %H:%M:%S"),
            "referrer_id": None,
            "referral_level": 1,
            "referrals": []
        }

    users[user_id]["deposits"].append(deposit)


async def invest_prepare(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_balance = users.get(user_id, {}).get("balance", 0)

    # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ 10 RUB ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    if user_balance < 10:
        keyboard = ReplyKeyboardMarkup(
            [["üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å"], ["üîô –Ω–∞ –≥–ª–∞–≤–Ω—É—é"]],
            resize_keyboard=True
        )
        await update.message.reply_text(
            "‚ö†Ô∏è *–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π ‚Äî 10 RUB.*\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: *{user_balance:.2f} RUB*\n\n"
            "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        return ConversationHandler.END

    # –ï—Å–ª–∏ –¥–µ–Ω–µ–≥ —Ö–≤–∞—Ç–∞–µ—Ç ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É
    context.user_data['invest_state'] = WAIT_INVEST_AMOUNT
    await update.message.reply_text(
        f"üí∏ *–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–æ—Ç 10 RUB):*\n"
        f"–î–æ—Å—Ç—É–ø–Ω–æ: *{user_balance:.2f} RUB*\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ *'üîô –Ω–∞ –≥–ª–∞–≤–Ω—É—é'* –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
        reply_markup=back_to_main_keyboard,
        parse_mode="Markdown"
    )
    return WAIT_INVEST_AMOUNT


def load_user_from_db(user_id):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()

    try:
        cursor.execute("""
            SELECT id, username, balance, deposits, created_at, referrer_id, referral_level, referrals_count 
            FROM users WHERE id = ?
        """, (user_id,))

        row = cursor.fetchone()
        if row:
            users[user_id] = {
                "username": row[1],
                "balance": float(row[2]),
                "deposits": json.loads(row[3] or "[]"),
                "created_at": row[4],
                "referrer_id": row[5],
                "referral_level": row[6] if row[6] else 1,
                "referrals_count": row[7] if row[7] else 0
            }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    finally:
        conn.close()


async def check_refs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    conn = sqlite3.connect("users.db")
    try:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT id, username, referrals_count 
            FROM users 
            WHERE id = ? OR referrer_id = ?
        """, (user_id, user_id))

        rows = cursor.fetchall()
        if not rows:
            await update.message.reply_text("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:\n"
        for row in rows:
            response += f"üë§ {row[1]} (ID: {row[0]}): {row[2]} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"

        await update.message.reply_text(response)

    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        conn.close()


def main():
    print(f"Admin chat ID: {ADMINS[0]}, type: {type(ADMINS[0])}")
    init_db()
    load_users()
    TOKEN = "7879007807:AAHGr3mBXCcd-VamRqQKj4CyY7F-YIKfpjw"

    application = Application.builder().token(TOKEN).build()
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –ø–µ—Ä–≤—ã–º–∏)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("ref", referral_stats))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("update", update_profile))
    application.add_handler(CommandHandler("cancel", cancel_operation))  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
    application.add_handler(CallbackQueryHandler(unified_callback_handler))

    # –í main() –ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç–µ–∫—Å—Ç–∞, –Ω–æ –ø–µ—Ä–µ–¥ ConversationHandler
    application.add_handler(MessageHandler(filters.Text(["üìà –î–µ–ø–æ–∑–∏—Ç", "–¥–µ–ø–æ–∑–∏—Ç", "–≤–∫–ª–∞–¥"]), show_deposit_info))
    application.add_handler(MessageHandler(filters.Text(["üíº –ö–æ—à–µ–ª—ë–∫", "–∫–æ—à–µ–ª—ë–∫"]), wallet_menu))
    application.add_handler(MessageHandler(filters.Text(["üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"]), calculator))
    application.add_handler(MessageHandler(filters.Text(["‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ"]), about_project))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø—Ä—è–º—É—é —Ñ—É–Ω–∫—Ü–∏—é)
    application.add_handler(MessageHandler(
        filters.Regex("(?i)^üîô –Ω–∞ –≥–ª–∞–≤–Ω—É—é$"),
        cancel_operation
    ))

    application.add_handler(CommandHandler("checkrefs", check_refs))

    # ConversationHandler –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    topup_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex(r"(?i)^\s*üí≥?\s*–ø–æ–ø–æ–ª–Ω–∏—Ç—å\s*$"), topup_start)
        ],
        states={
            WAIT_PAYMENT_METHOD: [
                MessageHandler(filters.Text(["üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", "üì± –°–ë–ü", "‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞"]), select_payment_method),
                MessageHandler(filters.Text(["‚ùå –û—Ç–º–µ–Ω–∞"]), cancel_operation),
                MessageHandler(filters.Text(["üîô –Ω–∞ –≥–ª–∞–≤–Ω—É—é"]), cancel_operation)
            ],
            WAIT_TOPUP_AMOUNT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, topup_amount),
                MessageHandler(filters.Text(["‚ùå –û—Ç–º–µ–Ω–∞"]), cancel_operation),
                MessageHandler(filters.Text(["üîô –Ω–∞ –≥–ª–∞–≤–Ω—É—é"]), cancel_operation)
            ],
            WAIT_CRYPTO_AMOUNT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, topup_amount),
                MessageHandler(filters.Text(["‚ùå –û—Ç–º–µ–Ω–∞"]), cancel_operation),
                MessageHandler(filters.Text(["üîô –Ω–∞ –≥–ª–∞–≤–Ω—É—é"]), cancel_operation)
            ]
        },
        fallbacks=[
            CommandHandler("cancel", cancel_operation)
        ]
    )

    withdraw_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Text(["üí∏ –í—ã–≤–µ—Å—Ç–∏", "–≤—ã–≤–µ—Å—Ç–∏", "–≤—ã–≤–æ–¥"]), withdraw_start)
        ],
        states={
            WAIT_WITHDRAW_METHOD: [
                MessageHandler(
                    filters.Text(["üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", "üì± –°–ë–ü", "‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", "‚ùå –û—Ç–º–µ–Ω–∞"]),
                    select_withdraw_method
                ),
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND,
                    lambda update, ctx: update.message.reply_text(
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫",
                        reply_markup=ReplyKeyboardMarkup(
                            [["üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", "üì± –°–ë–ü"],
                             ["‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", "‚ùå –û—Ç–º–µ–Ω–∞"]],
                            resize_keyboard=True
                        )
                    )
                )
            ],
            WAIT_WITHDRAW_AMOUNT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, withdraw_amount),
                MessageHandler(filters.Text(["‚ùå –û—Ç–º–µ–Ω–∞"]), cancel_operation)
            ],
            WAIT_REQUISITES: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, withdraw_requisites),
                MessageHandler(filters.Text(["‚ùå –û—Ç–º–µ–Ω–∞"]), cancel_operation)
            ]
        },
        fallbacks=[
            CommandHandler("cancel", cancel_operation),
            MessageHandler(filters.Text(["‚ùå –û—Ç–º–µ–Ω–∞"]), cancel_operation)
        ]
    )
    invest_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Text(["üì• –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", "–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å"]), invest_prepare)
        ],
        states={
            WAIT_INVEST_AMOUNT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text),
                MessageHandler(filters.Text(["üîô –Ω–∞ –≥–ª–∞–≤–Ω—É—é"]), cancel_operation)
            ]
        },
        fallbacks=[
            CommandHandler("cancel", cancel_operation),
            MessageHandler(filters.Text(["üîô –Ω–∞ –≥–ª–∞–≤–Ω—É—é"]), cancel_operation)
        ]
    )

    application.add_handler(topup_handler)
    application.add_handler(withdraw_handler)
    application.add_handler(invest_handler)
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∞–º—ã–º –ø–æ—Å–ª–µ–¥–Ω–∏–º)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    if os.environ.get('USE_WEBHOOK'):
        # Production mode - webhook
        webhook_url = os.environ.get('WEBHOOK_URL')
        application.run_webhook(
            listen="0.0.0.0",
            port=int(os.environ.get('WEBHOOK_PORT', 8443)),
            webhook_url=f"{webhook_url}/webhook/{TOKEN}",
        )
    else:
        # Development mode - polling
        application.run_polling()

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()


async def cancel_operation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã–µ, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    context.user_data.clear()

    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    user_id = update.effective_user.id
    if context.job_queue and f"depositupdate{user_id}" in context.job_queue.jobs():
        context.job_queue.jobs()[f"depositupdate{user_id}"].schedule_removal()

    await update.message.reply_text(
        "üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=main_keyboard
    )
    return ConversationHandler.END


async def handle_unknown_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    if update.message:
        await update.message.reply_text(
            "üîç –Ø –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
            reply_markup=main_keyboard
        )
    return ConversationHandler.END


if __name__ == "__main__":
    main()
