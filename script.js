const API_BASE_URL = window.location.origin + '/api';

// Telegram WebApp initialization
let tg = window.Telegram.WebApp;
tg.expand();
tg.ready();

// Global state
let userData = {
    balance: 0,
    deposits: [],
    referrals: { level1: 0, level2: 0, level3: 0 },
    userId: null,
    refLink: ''
};

// Initialize app
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
    setupEventListeners();
    loadUserData();
});

function initializeApp() {
    // Get user data from Telegram
    if (tg.initDataUnsafe.user) {
        userData.userId = tg.initDataUnsafe.user.id;
        userData.refLink = `https://t.me/your_bot_username?start=ref${userData.userId}`;
        document.getElementById('ref-link').value = userData.refLink;
    }

    // Update payment info based on selected method
    updatePaymentInfo('card');

    // Set initial withdraw balance
    document.getElementById('withdraw-balance').textContent = userData.balance.toFixed(2);
}

function setupEventListeners() {
    // Navigation tabs
    document.querySelectorAll('.nav-tab').forEach(tab => {
        tab.addEventListener('click', function() {
            const tabName = this.getAttribute('data-tab');
            switchTab(tabName);
        });
    });

    // Payment method selection for deposit
    document.querySelectorAll('#deposit .payment-method').forEach(method => {
        method.addEventListener('click', function() {
            const methodName = this.getAttribute('data-method');
            selectPaymentMethod('deposit', methodName);
            updatePaymentInfo(methodName);
        });
    });

    // Payment method selection for withdraw
    document.querySelectorAll('#withdraw .payment-method').forEach(method => {
        method.addEventListener('click', function() {
            const methodName = this.getAttribute('data-method');
            selectPaymentMethod('withdraw', methodName);
        });
    });

    // Close modal on backdrop click
    document.getElementById('invest-modal').addEventListener('click', function(e) {
        if (e.target === this) {
            closeModal();
        }
    });
}

function switchTab(tabName) {
    // Update active tab
    document.querySelectorAll('.nav-tab').forEach(tab => {
        tab.classList.remove('active');
    });
    document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');

    // Update active content
    document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.remove('active');
    });
    document.getElementById(tabName).classList.add('active');
}

function selectPaymentMethod(type, method) {
    const selector = `#${type} .payment-method`;
    document.querySelectorAll(selector).forEach(m => {
        m.classList.remove('active');
    });
    document.querySelector(`#${type} [data-method="${method}"]`).classList.add('active');
}

function updatePaymentInfo(method) {
    const paymentInfo = document.getElementById('payment-info');
    let content = '';

    switch(method) {
        case 'card':
            content = `
                <h4>üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞</h4>
                <p>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: <span class="highlight">5536 9137 2845 9012</span></p>
                <p>–ü–æ–ª—É—á–∞—Ç–µ–ª—å: <span class="highlight">–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤</span></p>
                <p>‚è∞ –û–±—Ä–∞–±–æ—Ç–∫–∞: –¥–æ 15 –º–∏–Ω—É—Ç</p>
                <p>üí∞ –ú–∏–Ω–∏–º—É–º: 100 RUB</p>
            `;
            break;
        case 'sbp':
            content = `
                <h4>üì± –°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π</h4>
                <p>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <span class="highlight">+7 912 345 67 89</span></p>
                <p>–ü–æ–ª—É—á–∞—Ç–µ–ª—å: <span class="highlight">–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤</span></p>
                <p>‚è∞ –û–±—Ä–∞–±–æ—Ç–∫–∞: –¥–æ 5 –º–∏–Ω—É—Ç</p>
                <p>üí∞ –ú–∏–Ω–∏–º—É–º: 100 RUB</p>
            `;
            break;
        case 'crypto':
            content = `
                <h4>‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞</h4>
                <p>USDT (TRC20): <span class="highlight">TBvZ1K4bLjLQ9Q7x8Jz3kPqA2nW5rRtYy</span></p>
                <p>‚ö†Ô∏è –¢–æ–ª—å–∫–æ USDT –≤ —Å–µ—Ç–∏ TRC20!</p>
                <p>‚è∞ –û–±—Ä–∞–±–æ—Ç–∫–∞: –¥–æ 30 –º–∏–Ω—É—Ç</p>
                <p>üí∞ –ú–∏–Ω–∏–º—É–º: 500 RUB</p>
            `;
            break;
    }

    paymentInfo.innerHTML = content;
}

function setAmount(amount) {
    document.getElementById('deposit-amount').value = amount;
}

function showInvestModal() {
    document.getElementById('invest-modal').classList.add('active');
    document.body.style.overflow = 'hidden';
}

function closeModal() {
    document.getElementById('invest-modal').classList.remove('active');
    document.body.style.overflow = 'auto';
}

function showLoading() {
    document.getElementById('loading').classList.add('active');
}

function hideLoading() {
    document.getElementById('loading').classList.remove('active');
}

function showToast(message, type = 'info') {
    const toast = document.getElementById('toast');
    toast.textContent = message;
    toast.className = `toast ${type} show`;

    setTimeout(() => {
        toast.classList.remove('show');
    }, 3000);
}

async function submitDeposit() {
    const amount = parseFloat(document.getElementById('deposit-amount').value);
    const method = document.querySelector('#deposit .payment-method.active').getAttribute('data-method');

    if (!amount || amount < 100) {
        showToast('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 100 RUB', 'error');
        return;
    }

    if (method === 'crypto' && amount < 500) {
        showToast('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: 500 RUB', 'error');
        return;
    }

    const data = {
        action: 'deposit',
        amount: amount,
        method: method,
        userId: userData.userId
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç—É
    tg.sendData(JSON.stringify(data));
    tg.close();
}
async function submitWithdraw() {
    const amount = parseFloat(document.getElementById('withdraw-amount').value);
    const requisites = document.getElementById('withdraw-requisites').value.trim();
    const method = document.querySelector('#withdraw .payment-method.active').getAttribute('data-method');

    if (!amount || amount < 100) {
        showToast('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 100 RUB', 'error');
        return;
    }

    if (!requisites || requisites.length < 5) {
        showToast('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', 'error');
        return;
    }

    if (amount > userData.balance) {
        showToast('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ', 'error');
        return;
    }

    const data = {
        action: 'withdraw',
        amount: amount,
        method: method,
        requisites: requisites,
        userId: userData.userId
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç—É
    tg.sendData(JSON.stringify(data));
    tg.close();
}

async function submitInvestment() {
    const amount = parseFloat(document.getElementById('invest-amount').value);

    if (!amount || amount < 10) {
        showToast('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: 10 RUB', 'error');
        return;
    }

    if (amount > userData.balance) {
        showToast('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ', 'error');
        return;
    }

    const data = {
        action: 'invest',
        amount: amount,
        userId: userData.userId
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç—É
    tg.sendData(JSON.stringify(data));
    tg.close();
}

async function submitWithdraw() {
    const amount = parseFloat(document.getElementById('withdraw-amount').value);
    const requisites = document.getElementById('withdraw-requisites').value.trim();
    const method = document.querySelector('#withdraw .payment-method.active').getAttribute('data-method');

    if (!amount || amount < 100) {
        showToast('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 100 RUB', 'error');
        return;
    }

    if (!requisites || requisites.length < 5) {
        showToast('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', 'error');
        return;
    }

    if (amount > userData.balance) {
        showToast('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ', 'error');
        return;
    }

    showLoading();

    try {
        // Send data to bot
        const data = {
            action: 'withdraw',
            amount: amount,
            method: method,
            requisites: requisites,
            userId: userData.userId
        };

        // Simulate API call
        await simulateApiCall();

        showToast('–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.', 'success');
        document.getElementById('withdraw-amount').value = '';
        document.getElementById('withdraw-requisites').value = '';

        // Send data to Telegram bot
        tg.sendData(JSON.stringify(data));

    } catch (error) {
        showToast('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏', 'error');
    } finally {
        hideLoading();
    }
}


function copyLink() {
    const refLink = document.getElementById('ref-link');
    refLink.select();
    refLink.setSelectionRange(0, 99999);

    navigator.clipboard.writeText(refLink.value).then(() => {
        showToast('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
    }).catch(() => {
        showToast('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É', 'error');
    });
}

function shareLink() {
    const shareText = `üöÄ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ TON STOCKER!\nüí∞ –°—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ 4% –≤ –¥–µ–Ω—å\nüéÅ –ü–æ–ª—É—á–∏ –±–æ–Ω—É—Å –ø–æ –º–æ–µ–π —Å—Å—ã–ª–∫–µ:\n${userData.refLink}`;

    if (navigator.share) {
        navigator.share({
            title: 'TON STOCKER',
            text: shareText
        });
    } else {
        // Fallback for Telegram
        tg.openTelegramLink(`https://t.me/share/url?url=${encodeURIComponent(userData.refLink)}&text=${encodeURIComponent(shareText)}`);
    }
}

async function loadUserData() {
    showLoading();

    try {
        // Simulate loading user data
        await simulateApiCall();

        // Mock data - replace with actual API call
        userData = {
            ...userData,
            balance: 1250.50,
            deposits: [
                { amount: 1000, startDate: '2025-09-20T10:00:00Z', profit: 120.50 },
                { amount: 500, startDate: '2025-09-25T15:30:00Z', profit: 45.20 }
            ],
            referrals: { level1: 5, level2: 12, level3: 3 }
        };

        updateUI();

    } catch (error) {
        showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
    } finally {
        hideLoading();
    }
}

function updateUI() {
    // Update balance
    document.querySelector('.user-balance').textContent = `‚ÇΩ${userData.balance.toFixed(2)}`;
    document.getElementById('balance').textContent = userData.balance.toFixed(2);
    document.getElementById('withdraw-balance').textContent = userData.balance.toFixed(2);

    // Update stats
    const totalInvested = userData.deposits.reduce((sum, dep) => sum + dep.amount, 0);
    const currentProfit = userData.deposits.reduce((sum, dep) => sum + dep.profit, 0);

    document.getElementById('total-invested').textContent = totalInvested.toFixed(2);
    document.getElementById('current-profit').textContent = currentProfit.toFixed(2);
    document.getElementById('deposits-count').textContent = userData.deposits.length;

    // Update referrals
    document.getElementById('referrals-count').textContent =
        userData.referrals.level1 + userData.referrals.level2 + userData.referrals.level3;
    document.getElementById('ref-level1').textContent = userData.referrals.level1;
    document.getElementById('ref-level2').textContent = userData.referrals.level2;
    document.getElementById('ref-level3').textContent = userData.referrals.level3;

    // Update deposits list
    updateDepositsList();
}

function updateDepositsList() {
    const depositsList = document.getElementById('deposits-list');

    if (userData.deposits.length === 0) {
        depositsList.innerHTML = `
            <div class="empty-state">
                <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤</p>
                <button class="btn btn-outline" onclick="showInvestModal()">–°–æ–∑–¥–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç</button>
            </div>
        `;
        return;
    }

    depositsList.innerHTML = userData.deposits.map(deposit => `
        <div class="deposit-item slide-up">
            <div class="deposit-info">
                <h4>–î–µ–ø–æ–∑–∏—Ç ‚ÇΩ${deposit.amount.toFixed(2)}</h4>
                <p>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date(deposit.startDate).toLocaleDateString('ru-RU')}</p>
                <p>–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: 4% –≤ –¥–µ–Ω—å</p>
            </div>
            <div class="deposit-profit">
                <div class="profit-amount">+‚ÇΩ${deposit.profit.toFixed(2)}</div>
                <p>–ü—Ä–∏–±—ã–ª—å</p>
            </div>
        </div>
    `).join('');
}

function simulateApiCall() {
    return new Promise(resolve => {
        setTimeout(resolve, 1500);
    });
}

// Handle Telegram WebApp events
tg.onEvent('mainButtonClicked', function() {
    tg.close();
});

tg.onEvent('backButtonClicked', function() {
    if (document.getElementById('invest-modal').classList.contains('active')) {
        closeModal();
    } else {
        tg.close();
    }
});

// Set main button
tg.MainButton.setText('–ó–∞–∫—Ä—ã—Ç—å');
tg.MainButton.show();

// Show back button when modal is open
function showInvestModal() {
    document.getElementById('invest-modal').classList.add('active');
    document.body.style.overflow = 'hidden';
    tg.BackButton.show();
}

function closeModal() {
    document.getElementById('invest-modal').classList.remove('active');
    document.body.style.overflow = 'auto';
    tg.BackButton.hide();
}

