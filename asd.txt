import asyncio
import logging
import json
import re
import os
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters
)
from datetime import datetime, timedelta
from telegram import (
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAIT_TOPUP_AMOUNT, WAIT_WITHDRAW_AMOUNT, WAIT_REQUISITES = range(3)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ADMINS = [-1002562283915]  # ID –∞–¥–º–∏–Ω–æ–≤
NEW_CHAT_ID = -1002562283915
DATA_FILE = "users.json"
users = {}
pending_topups = {}
pending_withdrawals = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_keyboard = ReplyKeyboardMarkup(
    [["üìà –î–µ–ø–æ–∑–∏—Ç", "üíº –ö–æ—à–µ–ª—ë–∫"], ["üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ"]],
    resize_keyboard=True,
    one_time_keyboard=False
)

wallet_keyboard = ReplyKeyboardMarkup(
    [["üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", "üí∏ –í—ã–≤–µ—Å—Ç–∏"], ["üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é"]],
    resize_keyboard=True,
    one_time_keyboard=False
)

cancel_keyboard = ReplyKeyboardMarkup(
    [["–û—Ç–º–µ–Ω–∞"]],
    resize_keyboard=True,
    one_time_keyboard=True
)


# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    global users
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            raw_users = json.load(f)
            for uid, data in raw_users.items():
                uid = int(uid)
                # –î–æ–±–∞–≤–ª—è–µ–º username –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if "username" not in data:
                    data["username"] = f"user_{uid}"  # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                users[uid] = data
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ last_interest
                if "last_interest" in data:
                    users[uid]["last_interest"] = datetime.strptime(data["last_interest"], "%Y-%m-%d %H:%M:%S")
                else:
                    users[uid]["last_interest"] = datetime.now()
    except (FileNotFoundError, json.JSONDecodeError):
        users = {}

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump({
            uid: {
                "balance": data["balance"],
                "last_interest": data["last_interest"].strftime("%Y-%m-%d %H:%M:%S"),
                "created_at": data.get("created_at", datetime.now().strftime("%Y-%m-%d %H:%M:%S")),
                "username": data.get("username")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º username (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
            } for uid, data in users.items()
        }, f, indent=2, ensure_ascii=False)


# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat_id = update.effective_chat.id

    if chat_id not in users:
        users[chat_id] = {
            'balance': 0.0,
            'last_interest': datetime.now(),
            'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'username': user.username or user.full_name or str(user.id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º username, –∏–º—è –∏–ª–∏ ID
        }
        save_data()

    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç</b>!\n\n"
        "üìà –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç—å –ø—Ä–∏–±—ã–ª—å.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ üëá",
        reply_markup=main_keyboard,
        parse_mode="HTML"
    )


async def wallet_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_data = users.get(chat_id, {})

    username = user_data.get('username')
    if not username:
        username = f"user_{chat_id}"
    elif isinstance(username, str) and not username.startswith('@'):
        username = f"@{username}"

    await update.message.reply_text(
        f'üßæ <b>–í–∞—à –∫–æ—à–µ–ª—ë–∫</b>:\n'
        f'üÜî <b>ID:</b> <code>{chat_id}</code>\n'
        f'üë§ <b>Username:</b> {username}\n'
        f'üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user_data.get("created_at", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")}\n'
        f'üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {user_data.get("balance", 0.0):.2f} USDT',
        parse_mode=ParseMode.HTML,
        reply_markup=wallet_keyboard
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_keyboard
    )
    return ConversationHandler.END


# –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
async def topup_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in pending_topups:
        await update.message.reply_text(
            "‚ùó –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ.",
            reply_markup=main_keyboard
        )
        return ConversationHandler.END

    await update.message.reply_text(
        "üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ USDT:",
        reply_markup=cancel_keyboard
    )
    return WAIT_TOPUP_AMOUNT


async def topup_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if text.lower() == "–æ—Ç–º–µ–Ω–∞":
        return await cancel(update, context)

    try:
        amount = float(text.replace(",", "."))
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
    except (ValueError, TypeError):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 50.5):",
            reply_markup=cancel_keyboard
        )
        return WAIT_TOPUP_AMOUNT

    pending_topups[user_id] = {
        'amount': amount,
        'timestamp': datetime.now().isoformat(),
        'username': update.effective_user.username or update.effective_user.full_name or str(user_id)
    }

    await update.message.reply_text(
        "üí∏ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>:\n\n"
        "üì§ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: <code>4276 0300 1671 0939</code>\n"
        "üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ê–±–¥–∞–ª—Ç–∏–≤ –ê–º–∞–Ω–æ–≤\n\n"
        "‚úÖ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
        "–û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 15 –º–∏–Ω—É—Ç.\n\n",

        reply_markup=main_keyboard,
        parse_mode="HTML"
    )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
    for admin in ADMINS:
        try:
            await context.bot.send_message(
                chat_id=admin,
                text=(
                    f"üü¢ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</b>\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.full_name}\n"
                    f"üîó @{update.effective_user.username}\n"
                    f"üÜî ID: <code>{user_id}</code>\n"
                    f"üí≥ –°—É–º–º–∞: <b>{amount:.2f} USDT</b>"
                ),
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"topup_confirm:{user_id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"topup_cancel:{user_id}")
                ]]),
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin}: {e}")

    return ConversationHandler.END


# –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
async def withdraw_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in users:
        users[user_id] = {
            "balance": 0,
            "last_interest": datetime.now(),
            "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "username": update.effective_user.username or update.effective_user.full_name or str(user_id)  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ
        }
    if user_id in pending_withdrawals:
        await update.message.reply_text(
            "‚ùó –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥.",
            reply_markup=main_keyboard
        )
        return ConversationHandler.END

    await update.message.reply_text(
        "üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ USDT:",
        reply_markup=cancel_keyboard
    )
    return WAIT_WITHDRAW_AMOUNT


async def withdraw_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if text.lower() == "–æ—Ç–º–µ–Ω–∞":
        return await cancel(update, context)

    try:
        amount = float(text.replace(",", "."))
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
    except (ValueError, TypeError):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 50.5):",
            reply_markup=cancel_keyboard
        )
        return WAIT_WITHDRAW_AMOUNT

    if amount > users[user_id]["balance"]:
        await update.message.reply_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {users[user_id]['balance']:.2f} USDT\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞':",
            reply_markup=cancel_keyboard
        )
        return WAIT_WITHDRAW_AMOUNT

    context.user_data["withdraw_amount"] = amount
    await update.message.reply_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è (–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ USDT-–∞–¥—Ä–µ—Å):",
        reply_markup=cancel_keyboard
    )
    return WAIT_REQUISITES


async def withdraw_requisites(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    requisites = update.message.text.strip()
    amount = context.user_data["withdraw_amount"]

    if len(requisites) < 5:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
        await update.message.reply_text(
            "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:",
            reply_markup=cancel_keyboard
        )
        return WAIT_REQUISITES

    request_id = f"{user_id}_{datetime.now().timestamp()}"
    pending_withdrawals[request_id] = {
        "user_id": user_id,
        "amount": amount,
        "requisites": requisites,
        "timestamp": datetime.now().isoformat(),
        "username": users[user_id].get('username', f'user_{user_id}')
    }

    await update.message.reply_text(
        "üéâ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n"
        "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –û–±—ã—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 1 —á–∞—Å–∞.\n"
        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! ‚ù§Ô∏è",
        reply_markup=main_keyboard
    )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
    for admin in ADMINS:
        try:
            await context.bot.send_message(
                chat_id=admin,
                text=(
                    f"üî¥ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥</b>\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.full_name}\n"
                    f"üîó @{update.effective_user.username}\n"
                    f"üÜî ID: <code>{user_id}</code>\n"
                    f"üí∏ –°—É–º–º–∞: <b>{amount:.2f} USDT</b>\n"
                    f"üìù –†–µ–∫–≤–∏–∑–∏—Ç—ã: <code>{requisites}</code>\n"
                    f"üÜî –ó–∞—è–≤–∫–∞: <code>{request_id}</code>"
                ),
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"withdraw_confirm:{request_id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"withdraw_cancel:{request_id}")
                ]]),
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin}: {e}")

    return ConversationHandler.END


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
async def admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    try:
        if data.startswith("topup_confirm:"):
            user_id = int(data.split(":")[1])
            request = pending_topups.get(user_id)

            if not request:
                await query.edit_message_text("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
                return

            amount = request['amount']

            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in users:
                users[user_id] = {
                    'balance': 0.0,
                    'last_interest': datetime.now(),
                    'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                    'username': request.get('username', f'user_{user_id}')
                }

            users[user_id]["balance"] += amount
            save_data()
            pending_topups.pop(user_id, None)  # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è

            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount:.2f} USDT!\n\n"
                     f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {users[user_id]['balance']:.2f} USDT"
            )

            await query.edit_message_text(
                f"üü¢ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {request.get('username', 'N/A')}\n"
                f"üÜî ID: {user_id}\n"
                f"üí≥ –°—É–º–º–∞: {amount:.2f} USDT"
            )

        elif data.startswith("topup_cancel:"):
            user_id = int(data.split(":")[1])
            request = pending_topups.get(user_id)

            if not request:
                await query.edit_message_text("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
                return

            pending_topups.pop(user_id, None)

            await context.bot.send_message(
                chat_id=user_id,
                text="‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                     "‚ÑπÔ∏è –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —ç—Ç–æ –æ—à–∏–±–∫–æ–π, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
            )

            await query.edit_message_text(
                f"üî¥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {request.get('username', 'N/A')}\n"
                f"üÜî ID: {user_id}\n"
                f"üí≥ –°—É–º–º–∞: {request['amount']:.2f} USDT"
            )

        elif data.startswith("withdraw_confirm:"):
            request_id = data.split(":")[1]
            req = pending_withdrawals.get(request_id)

            if not req:
                await query.edit_message_text("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
                return

            user_id = req["user_id"]
            amount = req["amount"]

            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in users:
                users[user_id] = {
                    'balance': 0.0,
                    'last_interest': datetime.now(),
                    'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                    'username': req.get('username', f'user_{user_id}')
                }

            if users[user_id]["balance"] >= amount:
                users[user_id]["balance"] -= amount
                save_data()
                pending_withdrawals.pop(request_id, None)

                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount:.2f} USDT –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                         f"üìù –†–µ–∫–≤–∏–∑–∏—Ç—ã: {req['requisites']}\n"
                         f"‚è≥ –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞.\n\n"
                         f"üí∞ –û—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–∞–Ω—Å–∞: {users[user_id]['balance']:.2f} USDT"
                )

                await query.edit_message_text(
                    f"üü¢ –í—ã–≤–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω\n"
                    f"üë§ {req.get('username', 'N/A')}\n"
                    f"üÜî {user_id}\n"
                    f"üí∏ {amount:.2f} USDT\n"
                    f"üìù {req['requisites']}"
                )
            else:
                await query.edit_message_text(
                    f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                    f"üë§ {req.get('username', 'N/A')}\n"
                    f"üÜî {user_id}\n"
                    f"üí∏ –ó–∞–ø—Ä–æ—à–µ–Ω–æ: {amount:.2f} USDT\n"
                    f"üí∞ –ò–º–µ–µ—Ç—Å—è: {users[user_id]['balance']:.2f} USDT"
                )

        elif data.startswith("withdraw_cancel:"):
            request_id = data.split(":")[1]
            req = pending_withdrawals.get(request_id)

            if not req:
                await query.edit_message_text("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
                return

            pending_withdrawals.pop(request_id, None)

            await context.bot.send_message(
                chat_id=req["user_id"],
                text=f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {req['amount']:.2f} USDT –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n"
                     "‚ÑπÔ∏è –ü—Ä–∏—á–∏–Ω–∞: —Ä–µ—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
                     "–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —ç—Ç–æ –æ—à–∏–±–∫–æ–π, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
            )

            await query.edit_message_text(
                f"üî¥ –í—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω\n"
                f"üë§ {req.get('username', 'N/A')}\n"
                f"üÜî {req['user_id']}\n"
                f"üí∏ {req['amount']:.2f} USDT\n"
                f"üìù {req['requisites']}"
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_callback: {e}", exc_info=True)
        await query.edit_message_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É"
        )

# –ü—Ä–æ—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def about_project(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ÑπÔ∏è <b>–û –ø—Ä–æ–µ–∫—Ç–µ</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç! üå±\n\n"
        "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –≤–∞—à–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è–º–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤.\n\n"
        "üìä –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "- –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ USDT\n"
        "- –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç—É –∏–ª–∏ –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª–µ–∫\n"
        "- –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å—Ç–∞—Ç–æ–∫\n"
        "- –ü—Ä–æ–∑—Ä–∞—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
        "üìà –ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
        "- –ë—ã—Å—Ç—Ä—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã\n"
        "- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n"
        "- –ü—Ä–æ—Å—Ç–∞—è –∏ —É–¥–æ–±–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @username",
        reply_markup=main_keyboard,
        parse_mode="HTML"
    )


async def update_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat_id = update.effective_chat.id

    users[chat_id]['username'] = user.username or user.full_name or str(user.id)
    save_data()

    await update.message.reply_text(
        "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!",
        reply_markup=main_keyboard
    )


async def calculator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìä –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π:",
        reply_markup=cancel_keyboard
    )
    context.user_data["awaiting_calc"] = True


async def calculator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìä –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 50.5):",
        reply_markup=cancel_keyboard
    )
    context.user_data["awaiting_calc"] = True


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower().strip()
    user_id = update.effective_user.id

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    if context.user_data.get("awaiting_calc"):
        if text == "–æ—Ç–º–µ–Ω–∞":
            context.user_data.pop("awaiting_calc", None)
            await update.message.reply_text(
                "‚ùå –†–∞—Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=main_keyboard
            )
            return

        try:
            amount = float(text.replace(",", "."))
            if amount <= 0:
                raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")

            daily = amount * 0.007  # ~21% –≤ –º–µ—Å—è—Ü = 0.7% –≤ –¥–µ–Ω—å
            monthly = amount * 0.21
            yearly = amount * 2.52

            await update.message.reply_text(
                f"üìà <b>–†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏</b> –¥–ª—è {amount:.2f} USDT:\n\n"
                f"‚ñ™Ô∏è –í –¥–µ–Ω—å: {daily:.2f} USDT\n"
                f"‚ñ™Ô∏è –í –º–µ—Å—è—Ü: {monthly:.2f} USDT\n"
                f"‚ñ™Ô∏è –í –≥–æ–¥: {yearly:.2f} USDT\n\n"
                "‚ÑπÔ∏è –†–∞—Å—á–µ—Ç –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è",
                reply_markup=main_keyboard,
                parse_mode="HTML"
            )
            context.user_data.pop("awaiting_calc", None)
        except ValueError:
            await update.message.reply_text(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 50.5)",
                reply_markup=cancel_keyboard
            )
        return

    if text == "üíº –∫–æ—à–µ–ª—ë–∫" or text == "–∫–æ—à–µ–ª—ë–∫":
        await wallet_menu(update, context)
    elif text == "üîô –Ω–∞ –≥–ª–∞–≤–Ω—É—é":
        await update.message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard)
    elif text == "üìà –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä":
        await calculator(update, context)
    elif text == "‚ÑπÔ∏è –æ –ø—Ä–æ–µ–∫—Ç–µ":
        await about_project(update, context)
    else:
        await update.message.reply_text(
            "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
            reply_markup=main_keyboard
        )


def main():
    TOKEN = "7879007807:AAHGr3mBXCcd-VamRqQKj4CyY7F-YIKfpjw"

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("cancel", cancel))
    application.add_handler(CommandHandler("update", update_profile))

    # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.Text(["üíº –ö–æ—à–µ–ª—ë–∫", "–∫–æ—à–µ–ª—ë–∫"]), wallet_menu))
    application.add_handler(MessageHandler(filters.Text(["üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é"]),
                                   lambda u, c: u.message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard)))
    application.add_handler(MessageHandler(filters.Text(["üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"]), calculator))
    application.add_handler(MessageHandler(filters.Text(["‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", "–æ –ø—Ä–æ–µ–∫—Ç–µ"]), about_project))

    # ConversationHandler –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    topup_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Text(["üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", "–ü–æ–ø–æ–ª–Ω–∏—Ç—å"]), topup_start)],
        states={
            WAIT_TOPUP_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, topup_amount)]
        },
        fallbacks=[CommandHandler("cancel", cancel), MessageHandler(filters.Text(["–û—Ç–º–µ–Ω–∞"]), cancel)],
        map_to_parent={ConversationHandler.END: ConversationHandler.END}
    )

    withdraw_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Text(["üí∏ –í—ã–≤–µ—Å—Ç–∏", "–í—ã–≤–µ—Å—Ç–∏"]), withdraw_start)],
        states={
            WAIT_WITHDRAW_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, withdraw_amount)],
            WAIT_REQUISITES: [MessageHandler(filters.TEXT & ~filters.COMMAND, withdraw_requisites)]
        },
        fallbacks=[CommandHandler("cancel", cancel), MessageHandler(filters.Text(["–û—Ç–º–µ–Ω–∞"]), cancel)],
        map_to_parent={ConversationHandler.END: ConversationHandler.END}
    )

    application.add_handler(topup_conv)
    application.add_handler(withdraw_conv)
    application.add_handler(CallbackQueryHandler(admin_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()


if __name__ == "__main__":
    main()